//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   public HashMap<String, ClassAttributesNode> classMap = new HashMap<String, ClassAttributesNode>();

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f1.accept(this, argu);
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);

      //print hashMap
      for (Map.Entry<String, ClassAttributesNode> entry : classMap.entrySet()) {
         System.out.println(entry.getKey() + " ");
         ClassAttributesNode classAttributesNode = entry.getValue();
         classAttributesNode.printClassAttributes();
      }

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();

      ClassAttributesNode classAttributes = new ClassAttributesNode(className);
      classMap.put(className, classAttributes);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();

      ClassAttributesNode classAttributes = new ClassAttributesNode(className);
      
      if(classMap.containsKey(className)){
         System.out.println("Class Already Declared!");
         System.exit(1);
      }
      else{
         classMap.put(className, classAttributes);
      }

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = className;
      classMethodIdentifier.methodName = null;
      classMethodIdentifier.classOrMethodVar = 1;

      //classAttributes.printClassAttributes();

      n.f2.accept(this, argu);
      n.f3.accept(this, (A)classMethodIdentifier);
      n.f4.accept(this, (A)className);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      String parentName = n.f3.accept(this, argu).toString();

      ClassAttributesNode classAttributes = new ClassAttributesNode(className, parentName);
      
      if(classMap.containsKey(className)){
         System.out.println("Class Already Declared!");
         System.exit(1);
      }
      else{
         classMap.put(className, classAttributes);
      }

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = className;
      classMethodIdentifier.methodName = null;
      classMethodIdentifier.classOrMethodVar = 1;

      //classAttributes.printClassAttributes();

      n.f4.accept(this, argu);
      n.f5.accept(this, (A)classMethodIdentifier);
      n.f6.accept(this, (A)className);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      R type = n.f0.accept(this, argu);
      R varName = n.f1.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;
      String className = classMethodIdentifier.className;
      String methodName = classMethodIdentifier.methodName;
      int cmv = classMethodIdentifier.classOrMethodVar;

      ClassAttributesNode classAttributes = classMap.get(className);
      //System.out.println("from the hashmap " + classAttributes.className);
      if(cmv == 1)
      {
         HashMap <String, String> classVarMap = classAttributes.classVarMap;
         if(classVarMap.containsKey(varName.toString())){
            System.out.println("Class Variable Already Declared!");
            System.exit(1);
         }
         else{
            classVarMap.put(varName.toString(), type.toString());
         }
      }
      else 
      {
         //System.out.println("method name " + methodName);
         MethodAttributes methodAttributes = classAttributes.getMethodAttributes(methodName);
         HashMap <String, String> methodVarMap = methodAttributes.methodVarMap;
         if(methodVarMap.containsKey(varName.toString())){
            System.out.println("Method Variable Already Declared!");
            System.exit(1);
         }
         else if(methodAttributes.formalParameters.containsKey(varName.toString())){
            System.out.println("Method Variable Already Declared in Parameter List!");
            System.exit(1);
         }
         else{
            methodVarMap.put(varName.toString(), type.toString());
         }
      }

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      R returnType = n.f1.accept(this, argu);
      R methodName = n.f2.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = (String)argu;
      classMethodIdentifier.methodName = methodName.toString();
      classMethodIdentifier.classOrMethodVar = 2;

      ClassAttributesNode classAttributes = classMap.get((String)argu);
      //System.out.println("from the Hashmap " + classAttributes.className);
      MethodAttributes methodAttributes = new MethodAttributes(methodName.toString(), returnType.toString());
      
      if(classAttributes.classMethodMap.containsKey(methodName.toString())){
         System.out.println("Method Already Declared!");
         System.exit(1);
      }
      else{
         classAttributes.classMethodMap.put(methodName.toString(), methodAttributes);
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, (A)classMethodIdentifier);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)classMethodIdentifier);
      n.f8.accept(this, (A)classMethodIdentifier);
      n.f9.accept(this, argu);
      R returnExpressionType = n.f10.accept(this, (A)classMethodIdentifier);

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      R typeName = n.f0.accept(this, argu);
      R identifier = n.f1.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;
      String className = classMethodIdentifier.className;
      String method = classMethodIdentifier.methodName;

      MethodAttributes methodAttributes = classMap.get(className).getMethodAttributes(method);
      HashMap <String, String> formalParameters = methodAttributes.formalParameters;
      if(formalParameters.containsKey(identifier.toString())){
         System.out.println("Formal Parameter Already Declared!");
         System.exit(1);
      }
      else{
         methodAttributes.addParameter(identifier.toString(), typeName.toString());
      }

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String str1 = n.f0.accept(this, argu).toString();
      String str2 = n.f1.accept(this, argu).toString();
      String str3 = n.f2.accept(this, argu).toString();
      _ret = (R) (str1 + str2 + str3);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("boolean") || !type2.equals("boolean")){
         System.out.println("Error: AndExpression Type error");
         System.exit(1);
      }
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("boolean") || !type2.equals("boolean")){
         System.out.println("Error: OrExpression Type error");
         System.exit(1);
      }
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("int") || !type2.equals("int")){
         System.out.println("Error: CompareExpression Type error");
         System.exit(1);
      }
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals(type2)){
         System.out.println("Error: neqExpression Type error");
         System.exit(1);
      }
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("int") || !type2.equals("int")){
         System.out.println("Error: PlusExpression Type error");
         System.exit(1);
      }
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("int") || !type2.equals("int")){
         System.out.println("Error: PlusExpression Type error");
         System.exit(1);
      }
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("int") || !type2.equals("int")){
         System.out.println("Error: PlusExpression Type error");
         System.exit(1);
      }
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      if(!type1.equals("int") || !type2.equals("int")){
         System.out.println("Error: PlusExpression Type error");
         System.exit(1);
      }
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String type2 = n.f2.accept(this, argu).toString();
      n.f3.accept(this, argu);
      if(!type1.equals("int[]") || !type2.equals("int")){
         System.out.println("Error: ArrayLookup Type error");
         System.exit(1);
      }
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = n.f0.accept(this, argu).toString();
      if(!type.equals("int[]")){
         System.out.println("Error: ArrayLength() called on non-array type");
         System.exit(1);
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String returnType = "int";
      return (R)returnType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String className = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String methodName = n.f2.accept(this, argu).toString();

      if(!classMap.containsKey(className))
      {
         System.out.println("Class Doesnt Exist!");
         System.exit(1);
      }
      ClassAttributesNode classAttributes = classMap.get(className);
      if(!classAttributes.classMethodMap.containsKey(methodName))
      {
         System.out.println("Method Doesnt Exist!");
         System.exit(1);
      }

      //parameter list cheching still not done
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      String type = classAttributes.classMethodMap.get(methodName).returnType;
      return (R)type;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      //Here we directly get the value of Integer as a String
      _ret = n.f0.accept(this, argu);
      String type = "int";
      return (R)type;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String type = "boolean";
      return (R)type;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      //Here we directly get the value of Identifier as a String
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprType = n.f3.accept(this, argu).toString();
      if(!exprType.equals("int")){
         System.out.println("Error: Array size must be of type int");
         System.exit(1);
      }
      n.f4.accept(this, argu);
      String type = "int[]";
      return (R)type;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();
      if(!classMap.containsKey(className)){
         System.out.println("Error: Class " + className + " not found");
         System.exit(1);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)className;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

class ClassMethodIdentifier
{
   public String className;
   public String methodName;
   public int classOrMethodVar;
}

class ClassAttributesNode 
{
   public String className;
   public String parentClassName;
   public HashMap<String, String> classVarMap;
   public HashMap<String, MethodAttributes> classMethodMap;

   public ClassAttributesNode(String className, String parentClassName)
   {
      this.className = className;
      this.parentClassName = parentClassName;
      this.classVarMap = new HashMap<String, String>();
      this.classMethodMap = new HashMap<String, MethodAttributes>();
   }

   public ClassAttributesNode(String className)
   {
      this.className = className;
      this.parentClassName = null;
      this.classVarMap = new HashMap<String, String>();
      this.classMethodMap = new HashMap<String, MethodAttributes>();
   }

   public void addClassVar(String varName, String varType)
   {
      this.classVarMap.put(varName, varType);
   }

   public void addClassMethod(String methodName, MethodAttributes methodAttributes)
   {
      this.classMethodMap.put(methodName, methodAttributes);
   }

   public String getVarType(String varName)
   {
      return this.classVarMap.get(varName);
   }

   public MethodAttributes getMethodAttributes(String methodName)
   {
      return this.classMethodMap.get(methodName);
   }

   //printing function for the class attributes
   public void printClassAttributes()
   {
      System.out.print("Class Name: " + this.className);
      System.out.println("Parent Class Name: " + this.parentClassName);
      System.out.print("Class Variables: (");
      for (Map.Entry<String, String> entry : this.classVarMap.entrySet())
      {
         System.out.print("Variable Name: " + entry.getKey() + " Variable Type: " + entry.getValue() + ", ");
      }
      System.out.println(")");
      System.out.println("Class Methods: ");
      for (Map.Entry<String, MethodAttributes> entry : this.classMethodMap.entrySet())
      {
         //System.out.println("Method Name: " + entry.getKey());
         entry.getValue().printMethodAttributes(1);
      }
   }
}

class MethodAttributes
{
   public String methodName;
   public String returnType;
   public HashMap<String, String> methodVarMap;
   public Integer parameterCount;
   public HashMap<String, String> formalParameters;
   public ArrayList<String> parameterTypes;

   public MethodAttributes(String methodName, String returnType)
   {
      this.methodName = methodName;
      this.returnType = returnType;
      this.methodVarMap = new HashMap<String, String>();
      this.parameterCount = 0;
      this.formalParameters = new HashMap<String, String>();
      this.parameterTypes = new ArrayList<String>();
   }

   public void addMethodVar(String varName, String varType)
   {
      this.methodVarMap.put(varName, varType);
   }

   public void addParameter(String parameterName, String parameterType)
   {
      this.formalParameters.put(parameterName, parameterType);
      this.parameterTypes.add(parameterType);
      this.parameterCount++;
   }

   public String getVarType(String varName)
   {
      return this.methodVarMap.get(varName);
   }

   public boolean validParameterList(ArrayList<String> argumentTypes)
   {
      if (this.parameterCount != argumentTypes.size()) return false;

      for(int i = 0; i < this.parameterCount; i++)
      {
         if (!this.parameterTypes.get(i).equals(argumentTypes.get(i))) return false;
      }

      return true;
   } 

   //printing function for the method attributes
   public void printMethodAttributes(int i)
   {
      System.out.print("Method Name: " + this.methodName);
      System.out.println("Return Type: " + this.returnType);
      System.out.print("Method Variables: (");
      for (Map.Entry<String, String> entry : this.methodVarMap.entrySet())
      {
         System.out.print("Variable Name: " + entry.getKey() + " Variable Type: " + entry.getValue() + ", ");
      }
      System.out.println(")");
      System.out.println("Parameter Count: " + this.parameterCount);
      if(i == 1)
      {
         System.out.print("Formal Parameters: (");
         for (Map.Entry<String, String> entry : this.formalParameters.entrySet())
         {
            System.out.print("Parameter Name: " + entry.getKey() + " Parameter Type: " + entry.getValue() + ", ");
         }
      }
      else if(i == 2)
      {
         System.out.print("Parameter Types: (");
         for (String parameterType : this.parameterTypes)
         {
            System.out.print("Parameter Type: " + parameterType + ", ");
         }
      }
      System.out.println(")");
   }
}