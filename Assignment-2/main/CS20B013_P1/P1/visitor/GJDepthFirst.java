//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   //My variables for storing the class name and method name
   public HashMap<String, ClassAttributesNode> classMap = new HashMap<String, ClassAttributesNode>();
   //My variable to store the state of the type checker
   public boolean typeCheck = false;
   //Global Array list for keeping note of arguments types
   ArrayList<String> argumentsType = new ArrayList<String>();
   //Debug variable
   public boolean debug = false;

   public String findType(String identifier, ClassMethodIdentifier classMethodIdentifier) 
   {
      String className = classMethodIdentifier.className;
      String methodName = classMethodIdentifier.methodName;
      MethodAttributes methodAttributes = classMap.get(className).getMethodAttributes(methodName);
      
      //If the identifier is a local variable, return the type of the local variable
      if(methodAttributes.methodVarMap.containsKey(identifier)) return methodAttributes.methodVarMap.get(identifier); 

      //If the identifier is a methods formal parameter, return the type of the formal parameter
      if(methodAttributes.formalParameters.containsKey(identifier)) return methodAttributes.formalParameters.get(identifier);

      while(true)
      {
         if(className == null) 
         {
            if(classMap.containsKey(identifier)) return identifier; //If the identifier is a class name, return the class name
            else return null;
         }
         ClassAttributesNode classAttributesNode = classMap.get(className);
         //If the identifier is a class variable, return the type of the class variable
         if(classAttributesNode.classVarMap.containsKey(identifier)) return classAttributesNode.classVarMap.get(identifier);
         className = classAttributesNode.parentClassName;
      }
   }
   
   public MethodAttributes findMethodAttributes(String methodName, String className)
   {
      while(true)
      {
         if(className == null) return null;
         if(classMap.get(className).classMethodMap.containsKey(methodName)) return classMap.get(className).classMethodMap.get(methodName);
         className = classMap.get(className).parentClassName;
      }
   }

   public boolean isParent(String child, String parent)
   {
      while(true)
      {
         if(child == null) return false;
         if(child.equals(parent)) return true;
         if(classMap.containsKey(child))
            child = classMap.get(child).parentClassName;
         else return false;
      }
   }

   public boolean validParameterList(ArrayList<String> argumentsType, ArrayList<String> parameterTypes)
   {
      if(parameterTypes.size() != argumentsType.size()) return false;
      for(int i=0; i<parameterTypes.size(); i++)
      {
         if(argumentsType.get(i).equals("int") || argumentsType.get(i).equals("boolean") || argumentsType.get(i).equals("int[]"))
         {
            return argumentsType.get(i).equals(parameterTypes.get(i));
         }
         if(!isParent(argumentsType.get(i), parameterTypes.get(i))) return false;
      }
      return true;
   }

   public void checkNoOverloading(ClassAttributesNode classAttributesNode, MethodAttributes methodAttributes)
   {
      if(classAttributesNode.parentClassName == null) return;

      ClassAttributesNode parentClassAttributesNode = classMap.get(classAttributesNode.parentClassName);
      if(parentClassAttributesNode.classMethodMap.containsKey(methodAttributes.methodName))
      {
         MethodAttributes parentMethodAttributes = parentClassAttributesNode.classMethodMap.get(methodAttributes.methodName);
         if(!parentMethodAttributes.returnType.equals(methodAttributes.returnType))
         {
            if(debug)
            {
               System.out.println("Overloading Return Type Error: " + methodAttributes.returnType + " != " + parentMethodAttributes.returnType);
               System.exit(0);
            }
            callError();
         }

         if(parentMethodAttributes.parameterTypes.size() != methodAttributes.parameterTypes.size())
         {
            if(debug)
            {
               System.out.println("parent Attributes: " + parentMethodAttributes.parameterTypes);
               System.out.println("method Attributes: " + methodAttributes.parameterTypes);
               System.out.println("Overloading Parameter Size Error: " + methodAttributes.parameterTypes.size() + " != " + parentMethodAttributes.parameterTypes.size());
               System.exit(0);
            }
            callError();
         }

         for(int i=0; i<methodAttributes.parameterTypes.size(); i++)
         {
            if(!parentMethodAttributes.parameterTypes.get(i).equals(methodAttributes.parameterTypes.get(i)))
            {
               if(debug)
               {
                  System.out.println("Overloading Parameter Type Error: " + methodAttributes.parameterTypes.get(i) + " != " + parentMethodAttributes.parameterTypes.get(i));
                  System.exit(0);
               }
               callError();
            }
         }
      }

      checkNoOverloading(parentClassAttributesNode, methodAttributes);
   }

   public void checkLoopedInheritance()
   {
      for(String className : classMap.keySet())
      {
         String parentClassName = classMap.get(className).parentClassName;
         while(true)
         {
            if(parentClassName == null) break;
            if(parentClassName.equals(className))
            {
               if(debug)
               {
                  System.out.println("Looped Inheritance Error: " + className);
                  System.exit(0);
               }
               callError();
            }
            if(classMap.containsKey(parentClassName)) parentClassName = classMap.get(parentClassName).parentClassName;
            else{
               if(debug)
               {
                  System.out.println("Parent Class Not Found Error: " + parentClassName);
                  System.exit(0);
               }
               callError();
            }
         }
      }
   }

   public void callError()
   {
      System.out.println("Type error");
      System.exit(0);
   }

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {

      R _ret=null;
      n.f1.accept(this, argu);
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);

      checkLoopedInheritance();

      typeCheck = true;
      n.f1.accept(this, argu);
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();

      if(!typeCheck)
      {
         ClassAttributesNode classAttributes = new ClassAttributesNode(className);
         MethodAttributes methodAttributes = new MethodAttributes("main", "void");
         classAttributes.addClassMethod("main", methodAttributes);
         classMap.put(className, classAttributes);
      }

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = className;
      classMethodIdentifier.methodName = "main";

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      if(typeCheck) n.f14.accept(this, (A)classMethodIdentifier);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();

      if(!typeCheck)
      {
         ClassAttributesNode classAttributes = new ClassAttributesNode(className);
      
         if(classMap.containsKey(className)){
            if(debug) {
               System.out.println("Class " + className + " Already Declared!");
               System.exit(0);
            }
            callError();
         }
         else{
            classMap.put(className, classAttributes);
         }
      }

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = className;
      classMethodIdentifier.methodName = null;
      classMethodIdentifier.classOrMethodVar = 1;

      n.f2.accept(this, argu);
      n.f3.accept(this, (A)classMethodIdentifier);
      n.f4.accept(this, (A)className);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      String parentName = n.f3.accept(this, argu).toString();

      ClassAttributesNode classAttributes = new ClassAttributesNode(className, parentName);

      if(!typeCheck)
      {      
         if(classMap.containsKey(className)){
            if(debug) {
               System.out.println("Class " + className + " Already Declared!");
               System.exit(0);
            }
            callError();
         }
         else{
            classMap.put(className, classAttributes);
         }
      }

      if(typeCheck)
      {
         if(!classMap.containsKey(parentName)){
            if(debug) {
               System.out.println("Class " + parentName + " Not Declared!");
               System.exit(0);
            }
            callError();
         }
      }

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = className;
      classMethodIdentifier.methodName = null;
      classMethodIdentifier.classOrMethodVar = 1;

      //classAttributes.printClassAttributes();

      n.f4.accept(this, argu);
      n.f5.accept(this, (A)classMethodIdentifier);
      n.f6.accept(this, (A)className);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {

      R _ret=null;
      R type = n.f0.accept(this, argu);
      R varName = n.f1.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;
      String className = classMethodIdentifier.className;
      String methodName = classMethodIdentifier.methodName;
      int classOrMethodVar = classMethodIdentifier.classOrMethodVar;

      if(!typeCheck)
      {
         ClassAttributesNode classAttributes = classMap.get(className);

         if(classOrMethodVar == 1)
         {
            HashMap <String, String> classVarMap = classAttributes.classVarMap;
            if(classVarMap.containsKey(varName.toString())){
               if(debug) {
                  System.out.println("Class Variable " + varName.toString() + " Already Declared!");
                  System.exit(0);
               }
               callError();
            }
            else{
               classVarMap.put(varName.toString(), type.toString());
            }
         }
         else 
         {
            MethodAttributes methodAttributes = classAttributes.getMethodAttributes(methodName);
            HashMap <String, String> methodVarMap = methodAttributes.methodVarMap;
            if(methodVarMap.containsKey(varName.toString())){
               if(debug) {
                  System.out.println("Method Variable " + varName.toString() + " Already Declared!");
                  System.exit(0);
               }
               callError();
            }
            else{
               methodVarMap.put(varName.toString(), type.toString());
            }
         }
      }

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      R returnType = n.f1.accept(this, argu);
      R methodName = n.f2.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = new ClassMethodIdentifier();
      classMethodIdentifier.className = (String)argu; //className which comes as argument from class declaration
      classMethodIdentifier.methodName = methodName.toString();
      classMethodIdentifier.classOrMethodVar = 2;

      ClassAttributesNode classAttributes = classMap.get((String)argu);
      MethodAttributes methodAttributes = new MethodAttributes(methodName.toString(), returnType.toString());
      
      if(!typeCheck)
      {
         if(classAttributes.classMethodMap.containsKey(methodName.toString())){
            //Checks for method name overloading in same class
            if(debug) {
               System.out.println("Method " + methodName.toString() + " Already Declared!");
               System.exit(0);
            }
            callError();
         }
         else{
            classAttributes.classMethodMap.put(methodName.toString(), methodAttributes);
         }
      }

      n.f3.accept(this, argu);
      if(!typeCheck) n.f4.accept(this, (A)classMethodIdentifier);
      
      if(typeCheck){
         //Checks for method name overloading in parent class, overriding allowed
         argumentsType.clear();
         methodAttributes.parameterTypes = argumentsType;
         n.f4.accept(this, (A)classMethodIdentifier);
         checkNoOverloading(classAttributes, methodAttributes);
         argumentsType.clear();
      }

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!typeCheck) n.f7.accept(this, (A)classMethodIdentifier);
      if(typeCheck) n.f8.accept(this, (A)classMethodIdentifier);
      n.f9.accept(this, argu);
      R returnExpressionType = n.f10.accept(this, (A)classMethodIdentifier);
      
      if(typeCheck)
      {
         String returnExpressionString = returnExpressionType.toString();
         if(!returnExpressionString.equals(returnType.toString()))
         {
            returnExpressionString = findType(returnExpressionString, classMethodIdentifier);
            if(returnExpressionString == null)
            {
               if(debug) {
                  System.out.println("Return Expression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
            if(!returnExpressionString.equals(returnType.toString()))
            {
               if(!isParent(returnExpressionString, returnType.toString()))
               {
                  if(debug) {
                     System.out.println("Return Expression Type Mismatch!");
                     System.exit(0);
                  }
                  callError();
               }
            }
         }
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {

      R _ret=null;
      R typeName = n.f0.accept(this, argu);
      R identifier = n.f1.accept(this, argu);

      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;
      String className = classMethodIdentifier.className;
      String method = classMethodIdentifier.methodName;

      if(!typeCheck)
      {
         MethodAttributes methodAttributes = classMap.get(className).getMethodAttributes(method);
         HashMap <String, String> formalParameters = methodAttributes.formalParameters;
         if(formalParameters.containsKey(identifier.toString())){
            if(debug) {
               System.out.println("Formal Parameter " + identifier.toString() + " Already Declared!");
               System.exit(0);
            }
            callError();
         }
         else methodAttributes.addParameter(identifier.toString(), typeName.toString());
      }
      if(typeCheck) argumentsType.add(typeName.toString());
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {

      R _ret=null;
      String str1 = n.f0.accept(this, argu).toString();
      String str2 = n.f1.accept(this, argu).toString();
      String str3 = n.f2.accept(this, argu).toString();
      _ret = (R) (str1 + str2 + str3);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String varName = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String expressionType = n.f2.accept(this, argu).toString();
      varName = findType(varName, (ClassMethodIdentifier)argu);
      if(varName == null)
      {
         if(debug) {
            System.out.println("Variable " + varName + " Not Declared!");
            System.exit(0);
         }
         callError();
      }

      if(!varName.equals(expressionType)) //checks for this and new identifier expressions
      {
         String expressionNewType = findType(expressionType, (ClassMethodIdentifier)argu);
         if(expressionNewType == null)
         {
            if(debug) {
               System.out.println("Assignment Type Mismatch! " + varName + " " + expressionType);
               System.exit(0);
            }
            callError();
         }

         if(!varName.equals(expressionNewType)) //checks for basic data types
         {
            if(!isParent(expressionNewType, varName)) //checks for inheritance matching
            {
               if(debug) {
                  System.out.println("Assignment Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
      }

      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret = null;
      String varName = n.f0.accept(this, argu).toString();
      if(!varName.equals("int[]")) varName = findType(varName, (ClassMethodIdentifier)argu);
      n.f1.accept(this, argu);
      String exprType1 = n.f2.accept(this, argu).toString();
      if(!exprType1.equals("int")) exprType1 = findType(exprType1, (ClassMethodIdentifier)argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String exprType2 = n.f5.accept(this, argu).toString();
      if(!exprType2.equals("int")) exprType2 = findType(exprType2, (ClassMethodIdentifier)argu);

      if(varName != null && exprType1 != null && exprType2 != null)
      {
         if(!varName.equals("int[]") || !exprType1.equals("int") || !exprType2.equals("int"))
         {
            if(debug) {
               System.out.println("Array Assignment Type Mismatch!");
               System.exit(0);
            }
            callError();
         }
      }
      else
      {
         if(debug) {
            System.out.println("Array Assignment Type Mismatch!");
            System.exit(0);
         }
         callError();
      }
      
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = n.f2.accept(this, argu).toString();
      if(!type.equals("boolean")) type = findType(type, (ClassMethodIdentifier)argu);

      if(type == null || !type.equals("boolean"))
      {
         if(debug) {
            System.out.println("IfthenStatement Type Mismatch!");
            System.exit(0);
         }
         callError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = n.f2.accept(this, argu).toString();
      if(!type.equals("boolean")) type = findType(type, (ClassMethodIdentifier)argu);

      if(type == null || !type.equals("boolean"))
      {
         if(debug) {
            System.out.println("IfthenElseStatement Type Mismatch!");
            System.exit(0);
         }
         callError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = n.f2.accept(this, argu).toString();
      if(!type.equals("boolean")) type = findType(type, (ClassMethodIdentifier)argu);

      if(type == null || !type.equals("boolean"))
      {
         if(debug) {
            System.out.println("WhileStatement Type Mismatch!");
            System.exit(0);
         }
         callError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = n.f2.accept(this, argu).toString();
      if(!type.equals("int")) type = findType(type, (ClassMethodIdentifier)argu);

      if(type == null || !type.equals("int"))
      {
         if(debug) {
            System.out.println("PrintStatement Type Mismatch!");
            System.exit(0);
         }
         callError();
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("boolean")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("boolean")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("boolean") || !type2.equals("boolean"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("AndExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("AndExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("boolean")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("boolean")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("boolean") || !type2.equals("boolean"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("OrExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("OrExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("CompareExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("CompareExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("neqExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("neqExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck) 
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("PlusExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("PlusExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("MinusExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("MinusExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {

      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("TimesExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("TimesExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("DivExpression Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("DivExpression Type Mismatch!");
               System.exit(0);
            }
            callError();
         } 
      }
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;

      String type1 = n.f0.accept(this, argu).toString();
      if(!type1.equals("int[]")) type1 = findType(type1, (ClassMethodIdentifier)argu);

      n.f1.accept(this, argu);

      String type2 = n.f2.accept(this, argu).toString();
      if(!type2.equals("int")) type2 = findType(type2, (ClassMethodIdentifier)argu);

      n.f3.accept(this, argu);
      if(typeCheck)
      {
         if(type1 != null && type2 != null)
         {
            if(!type1.equals("int[]") || !type2.equals("int"))
            {
               if(debug) {
                  System.out.println("Type1: " + type1 + " Type2: " + type2);
                  System.out.println("ArrayLookup Type Mismatch!");
                  System.exit(0);
               }
               callError();
            }
         }
         else 
         {
            if(debug) {
               System.out.println("Type1: " + type1 + " Type2: " + type2);
               System.out.println("ArrayLookup Type Mismatch!");
               System.exit(0);
            }
            callError();
         }
      }
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String varName = n.f0.accept(this, argu).toString();
      if(typeCheck)
      {
         String type = findType(varName, (ClassMethodIdentifier)argu);
         if(type == null || !type.equals("int[]"))
         {
            if(debug) {
               System.out.println("ArrayLength Type Mismatch!");
               System.exit(0);
            }
            callError();
         }
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String identifier = n.f0.accept(this, argu).toString();

      n.f1.accept(this, argu);
      String methodName = n.f2.accept(this, argu).toString();
      
      String className;
      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;

      if(typeCheck)
      {
         className = findType(identifier, classMethodIdentifier);

         if(className == null)
         {
            if(debug)
            {
               System.out.println("Error: Method called on non-class type");
               System.exit(0);
            }
            callError();
         }

         MethodAttributes methodAttributes = findMethodAttributes(methodName, className);
         if(methodAttributes == null)
         {
            if(debug)
            {
               System.out.println("Error: Method not found");
               System.exit(0);
            }
            callError();
         }
         String methodReturnType = methodAttributes.returnType;

         n.f3.accept(this, argu);
         
         ArrayList<String> tempArgumentsList = new ArrayList<String>();
         //copy the arguments list
         for(String s : argumentsType) tempArgumentsList.add(s);
         argumentsType.clear();

         n.f4.accept(this, argu);
         ArrayList<String> parametersTypes = methodAttributes.parameterTypes;

         if(validParameterList(argumentsType, parametersTypes) == false)
         {
            if(debug)
            {
               System.out.println("Error: Invalid parameter list");
               System.exit(0);
            }
            callError();
         }
         argumentsType.clear();
         for(String s : tempArgumentsList) argumentsType.add(s);

         n.f5.accept(this, argu);
         _ret = (R)methodReturnType;
         return _ret;
      }

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String type = n.f0.accept(this, argu).toString();

      String typeFinal = null;
      if(!type.equals("int") && !type.equals("boolean") && !type.equals("int[]")) 
         typeFinal = findType(type, (ClassMethodIdentifier)argu);
      else 
         typeFinal = type;
      
      if(typeFinal == null)
      {
         if(debug)
         {
            System.out.println("Error: Invalid type: " + type);
            System.exit(0);
         }
         callError();
      }
      argumentsType.add(typeFinal);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = n.f1.accept(this, argu).toString();
      
      String typeFinal = null;
      if(!type.equals("int") && !type.equals("boolean") && !type.equals("int[]")) 
         typeFinal = findType(type, (ClassMethodIdentifier)argu); //it must be a variable
      else 
         typeFinal = type; //it is a basic type
      
      if(typeFinal == null)
      {
         if(debug)
         {
            System.out.println("Error: Invalid type: " + type);
            System.exit(0);
         }
         callError();
      }
      argumentsType.add(typeFinal);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) 
   {
      R _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      n.f0.accept(this, argu);
      R _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      n.f0.accept(this, argu);
      R _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      n.f0.accept(this, argu);
      R _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {   
      R _ret = n.f0.accept(this, argu); //Here we directly get the value of Identifier as a String
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      n.f0.accept(this, argu);
      ClassMethodIdentifier classMethodIdentifier = (ClassMethodIdentifier)argu;
      R _ret = (R)classMethodIdentifier.className;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) 
   {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprType = n.f3.accept(this, argu).toString();
      if(typeCheck)
      {
         if(!exprType.equals("int"))
         {
            exprType = findType(exprType, (ClassMethodIdentifier)argu);
         }
         if(exprType == null || !exprType.equals("int")){
            if(debug)
            {
               System.out.println("Error: Invalid type in new array allocation: " + exprType);
               System.exit(0);
            }
            callError();
         }
      }
      n.f4.accept(this, argu);
      R _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();
      if(typeCheck)
      {
         if(!classMap.containsKey(className))
         {
            if(debug)
            {
               System.out.println("Error: Invalid className in new expression: " + className);
               System.exit(0);
            }
            callError();
         }
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      R _ret = (R)className;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) 
   {
      n.f0.accept(this, argu);
      R type = n.f1.accept(this, argu);
      String typeString = type.toString();
      if(typeCheck)
      {
         if(!typeString.equals("boolean")) typeString = findType(typeString, (ClassMethodIdentifier)argu);
         if(typeString == null  || !typeString.equals("boolean"))
         {
            if(debug)
            {
               System.out.println("Error: Invalid type in not expression: " + type.toString());
               System.exit(0);
            }
            callError();
         }
      }
      R _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) 
   {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }
}

class ClassMethodIdentifier
{
   public String className;
   public String methodName;
   public int classOrMethodVar;
}

class ClassAttributesNode 
{
   public String className;
   public String parentClassName;
   public HashMap<String, String> classVarMap;
   public HashMap<String, MethodAttributes> classMethodMap;

   public ClassAttributesNode(String className, String parentClassName)
   {
      this.className = className;
      this.parentClassName = parentClassName;
      this.classVarMap = new HashMap<String, String>();
      this.classMethodMap = new HashMap<String, MethodAttributes>();
   }

   public ClassAttributesNode(String className)
   {
      this.className = className;
      this.parentClassName = null;
      this.classVarMap = new HashMap<String, String>();
      this.classMethodMap = new HashMap<String, MethodAttributes>();
   }

   public void addClassMethod(String methodName, MethodAttributes methodAttributes)
   {
      this.classMethodMap.put(methodName, methodAttributes);
   }

   public MethodAttributes getMethodAttributes(String methodName)
   {
      return this.classMethodMap.get(methodName);
   }
}

class MethodAttributes
{
   public String methodName;
   public String returnType;
   public HashMap<String, String> methodVarMap;
   public Integer parameterCount;
   public HashMap<String, String> formalParameters;
   public ArrayList<String> parameterTypes;

   public MethodAttributes(String methodName, String returnType)
   {
      this.methodName = methodName;
      this.returnType = returnType;
      this.methodVarMap = new HashMap<String, String>();
      this.parameterCount = 0;
      this.formalParameters = new HashMap<String, String>();
      this.parameterTypes = new ArrayList<String>();
   }

   public void addParameter(String parameterName, String parameterType)
   {
      this.formalParameters.put(parameterName, parameterType);
      this.parameterTypes.add(parameterType);
      this.parameterCount++;
   }
}